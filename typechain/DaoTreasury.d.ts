/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DaoTreasuryInterface extends ethers.utils.Interface {
  functions: {
    "DaoSponsor()": FunctionFragment;
    "DaoVault()": FunctionFragment;
    "GAS_ATTR_ID()": FunctionFragment;
    "MAX_COMMITEE_COUNT()": FunctionFragment;
    "WEB3DAONFT()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addCommitee(address)": FunctionFragment;
    "borrowGas(uint256,uint256)": FunctionFragment;
    "burnGas(uint256)": FunctionFragment;
    "buyGas(uint256,uint256)": FunctionFragment;
    "changeRequirement(uint256)": FunctionFragment;
    "commitees(uint256)": FunctionFragment;
    "confirmTransaction(uint256)": FunctionFragment;
    "confirmations(uint256,address)": FunctionFragment;
    "debt()": FunctionFragment;
    "gasAttrPrice()": FunctionFragment;
    "gasTax()": FunctionFragment;
    "getCommitees()": FunctionFragment;
    "getConfirmationCount(uint256)": FunctionFragment;
    "getConfirmations(uint256)": FunctionFragment;
    "holdNFTId()": FunctionFragment;
    "isCommitee(address)": FunctionFragment;
    "isConfirmed(uint256)": FunctionFragment;
    "max()": FunctionFragment;
    "maxDebt()": FunctionFragment;
    "mintGas(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "quit(uint256,uint256)": FunctionFragment;
    "removeCommitee(address)": FunctionFragment;
    "replaceCommitee(address,address)": FunctionFragment;
    "required()": FunctionFragment;
    "returnGas(uint256,uint256)": FunctionFragment;
    "revokeConfirmation(uint256)": FunctionFragment;
    "sellGas(uint256,uint256)": FunctionFragment;
    "setDaoSponsor(address)": FunctionFragment;
    "setDaoVault(address)": FunctionFragment;
    "setGasAttrPrice(uint256)": FunctionFragment;
    "setGasTax(uint256)": FunctionFragment;
    "setHoldNFTId(uint256)": FunctionFragment;
    "setMaxDebt(uint256)": FunctionFragment;
    "sponsor(uint256,uint256)": FunctionFragment;
    "submitTransaction(address,bytes)": FunctionFragment;
    "transactionCount()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transferNFT(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DaoSponsor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DaoVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GAS_ATTR_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COMMITEE_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEB3DAONFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "addCommitee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowGas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyGas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasAttrPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCommitees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "holdNFTId", values?: undefined): string;
  encodeFunctionData(functionFragment: "isCommitee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "max", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCommitee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceCommitee",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnGas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellGas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoSponsor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setDaoVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGasAttrPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoldNFTId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNFT",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DaoSponsor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DaoVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GAS_ATTR_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COMMITEE_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WEB3DAONFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasAttrPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommitees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdNFTId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCommitee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "max", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceCommitee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "returnGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDaoSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasAttrPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGasTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHoldNFTId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sponsor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNFT",
    data: BytesLike
  ): Result;

  events: {
    "BurnGas(uint256)": EventFragment;
    "BuyGas(uint256,uint256)": EventFragment;
    "CommiteeAddition(address)": EventFragment;
    "CommiteeRemoval(address)": EventFragment;
    "Confirmation(address,uint256)": EventFragment;
    "Execution(uint256)": EventFragment;
    "ExecutionFailure(uint256)": EventFragment;
    "ExecutionSuccess(uint256)": EventFragment;
    "MintGas(uint256)": EventFragment;
    "RequirementChange(uint256)": EventFragment;
    "Revocation(address,uint256)": EventFragment;
    "SellGas(uint256,uint256)": EventFragment;
    "SetDaoSponsor(address)": EventFragment;
    "SetDaoVault(address)": EventFragment;
    "SetGasAttrPrice(uint256)": EventFragment;
    "SetGasTax(uint256)": EventFragment;
    "SetHoldNFTId(uint256)": EventFragment;
    "SetMaxDebt(uint256)": EventFragment;
    "Submission(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommiteeAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommiteeRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequirementChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDaoSponsor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDaoVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasAttrPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasTax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHoldNFTId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submission"): EventFragment;
}

export class DaoTreasury extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DaoTreasuryInterface;

  functions: {
    DaoSponsor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DaoSponsor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    DaoVault(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DaoVault()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    GAS_ATTR_ID(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "GAS_ATTR_ID()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    MAX_COMMITEE_COUNT(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "MAX_COMMITEE_COUNT()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addCommitee(
      commitee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCommitee(address)"(
      commitee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrowGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnGas(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyGas(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyGas(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "commitees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    debt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "debt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    gasAttrPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "gasAttrPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    gasTax(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "gasTax()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getCommitees(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getCommitees()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _confirmations: string[];
      0: string[];
    }>;

    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _confirmations: string[];
      0: string[];
    }>;

    holdNFTId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "holdNFTId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isCommitee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isCommitee(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ret: boolean;
      0: boolean;
    }>;

    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ret: boolean;
      0: boolean;
    }>;

    max(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "max()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxDebt(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxDebt()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mintGas(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    quit(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "quit(uint256,uint256)"(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeCommitee(
      commitee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeCommitee(address)"(
      commitee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    replaceCommitee(
      commitee: string,
      newCommitee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "replaceCommitee(address,address)"(
      commitee: string,
      newCommitee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    required(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "required()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    returnGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "returnGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sellGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDaoSponsor(
      _DaoSponsor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDaoSponsor(address)"(
      _DaoSponsor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDaoVault(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGasAttrPrice(
      _gasAttrPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGasAttrPrice(uint256)"(
      _gasAttrPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGasTax(
      _gasTax: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGasTax(uint256)"(
      _gasTax: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setHoldNFTId(
      _holdNFTId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setHoldNFTId(uint256)"(
      _holdNFTId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxDebt(
      _maxDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxDebt(uint256)"(
      _maxDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sponsor(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sponsor(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitTransaction(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "transactionCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      data: string;
      executed: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      data: string;
      executed: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;

    transferNFT(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferNFT(address,address,uint256)"(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DaoSponsor(overrides?: CallOverrides): Promise<string>;

  "DaoSponsor()"(overrides?: CallOverrides): Promise<string>;

  DaoVault(overrides?: CallOverrides): Promise<string>;

  "DaoVault()"(overrides?: CallOverrides): Promise<string>;

  GAS_ATTR_ID(overrides?: CallOverrides): Promise<BigNumber>;

  "GAS_ATTR_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_COMMITEE_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_COMMITEE_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  WEB3DAONFT(overrides?: CallOverrides): Promise<string>;

  "WEB3DAONFT()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  addCommitee(
    commitee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCommitee(address)"(
    commitee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowGas(
    tokenId: BigNumberish,
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrowGas(uint256,uint256)"(
    tokenId: BigNumberish,
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnGas(
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnGas(uint256)"(
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyGas(
    tokenId: BigNumberish,
    ethAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyGas(uint256,uint256)"(
    tokenId: BigNumberish,
    ethAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeRequirement(
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeRequirement(uint256)"(
    _required: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "commitees(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  confirmTransaction(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "confirmTransaction(uint256)"(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  confirmations(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "confirmations(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

  gasAttrPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "gasAttrPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  gasTax(overrides?: CallOverrides): Promise<BigNumber>;

  "gasTax()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCommitees(overrides?: CallOverrides): Promise<string[]>;

  "getCommitees()"(overrides?: CallOverrides): Promise<string[]>;

  getConfirmationCount(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getConfirmationCount(uint256)"(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfirmations(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getConfirmations(uint256)"(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  holdNFTId(overrides?: CallOverrides): Promise<BigNumber>;

  "holdNFTId()"(overrides?: CallOverrides): Promise<BigNumber>;

  isCommitee(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isCommitee(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConfirmed(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConfirmed(uint256)"(
    transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  max(overrides?: CallOverrides): Promise<BigNumber>;

  "max()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxDebt(overrides?: CallOverrides): Promise<BigNumber>;

  "maxDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintGas(
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintGas(uint256)"(
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC721Received(address,address,uint256,bytes)"(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  quit(
    tokenId: BigNumberish,
    sponsorAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "quit(uint256,uint256)"(
    tokenId: BigNumberish,
    sponsorAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeCommitee(
    commitee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeCommitee(address)"(
    commitee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  replaceCommitee(
    commitee: string,
    newCommitee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "replaceCommitee(address,address)"(
    commitee: string,
    newCommitee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  "required()"(overrides?: CallOverrides): Promise<BigNumber>;

  returnGas(
    tokenId: BigNumberish,
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "returnGas(uint256,uint256)"(
    tokenId: BigNumberish,
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeConfirmation(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeConfirmation(uint256)"(
    transactionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sellGas(
    tokenId: BigNumberish,
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellGas(uint256,uint256)"(
    tokenId: BigNumberish,
    gasAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDaoSponsor(
    _DaoSponsor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDaoSponsor(address)"(
    _DaoSponsor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDaoVault(
    _DaoVault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDaoVault(address)"(
    _DaoVault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGasAttrPrice(
    _gasAttrPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGasAttrPrice(uint256)"(
    _gasAttrPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGasTax(
    _gasTax: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGasTax(uint256)"(
    _gasTax: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setHoldNFTId(
    _holdNFTId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setHoldNFTId(uint256)"(
    _holdNFTId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxDebt(
    _maxDebt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxDebt(uint256)"(
    _maxDebt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sponsor(
    tokenId: BigNumberish,
    ethAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sponsor(uint256,uint256)"(
    tokenId: BigNumberish,
    ethAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitTransaction(
    destination: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitTransaction(address,bytes)"(
    destination: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  "transactionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    destination: string;
    data: string;
    executed: boolean;
    0: string;
    1: string;
    2: boolean;
  }>;

  "transactions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    destination: string;
    data: string;
    executed: boolean;
    0: string;
    1: string;
    2: boolean;
  }>;

  transferNFT(
    token: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferNFT(address,address,uint256)"(
    token: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DaoSponsor(overrides?: CallOverrides): Promise<string>;

    "DaoSponsor()"(overrides?: CallOverrides): Promise<string>;

    DaoVault(overrides?: CallOverrides): Promise<string>;

    "DaoVault()"(overrides?: CallOverrides): Promise<string>;

    GAS_ATTR_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "GAS_ATTR_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COMMITEE_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_COMMITEE_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<string>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    addCommitee(commitee: string, overrides?: CallOverrides): Promise<void>;

    "addCommitee(address)"(
      commitee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrowGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnGas(gasAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burnGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyGas(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyGas(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "commitees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasAttrPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "gasAttrPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasTax(overrides?: CallOverrides): Promise<BigNumber>;

    "gasTax()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCommitees(overrides?: CallOverrides): Promise<string[]>;

    "getCommitees()"(overrides?: CallOverrides): Promise<string[]>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    holdNFTId(overrides?: CallOverrides): Promise<BigNumber>;

    "holdNFTId()"(overrides?: CallOverrides): Promise<BigNumber>;

    isCommitee(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isCommitee(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    max(overrides?: CallOverrides): Promise<BigNumber>;

    "max()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintGas(gasAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "mintGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    quit(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "quit(uint256,uint256)"(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCommitee(commitee: string, overrides?: CallOverrides): Promise<void>;

    "removeCommitee(address)"(
      commitee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceCommitee(
      commitee: string,
      newCommitee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "replaceCommitee(address,address)"(
      commitee: string,
      newCommitee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    "required()"(overrides?: CallOverrides): Promise<BigNumber>;

    returnGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "returnGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sellGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoSponsor(
      _DaoSponsor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDaoSponsor(address)"(
      _DaoSponsor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoVault(_DaoVault: string, overrides?: CallOverrides): Promise<void>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasAttrPrice(
      _gasAttrPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGasAttrPrice(uint256)"(
      _gasAttrPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasTax(_gasTax: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setGasTax(uint256)"(
      _gasTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHoldNFTId(
      _holdNFTId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setHoldNFTId(uint256)"(
      _holdNFTId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDebt(
      _maxDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxDebt(uint256)"(
      _maxDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsor(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sponsor(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransaction(
      destination: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      data: string;
      executed: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      destination: string;
      data: string;
      executed: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;

    transferNFT(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferNFT(address,address,uint256)"(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BurnGas(gasAmount: null): EventFilter;

    BuyGas(tokenId: null, gasAmount: null): EventFilter;

    CommiteeAddition(commitee: string | null): EventFilter;

    CommiteeRemoval(commitee: string | null): EventFilter;

    Confirmation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    Execution(transactionId: BigNumberish | null): EventFilter;

    ExecutionFailure(transactionId: BigNumberish | null): EventFilter;

    ExecutionSuccess(transactionId: BigNumberish | null): EventFilter;

    MintGas(gasAmount: null): EventFilter;

    RequirementChange(required: null): EventFilter;

    Revocation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    SellGas(tokenId: null, gasAmount: null): EventFilter;

    SetDaoSponsor(_DaoSponsor: null): EventFilter;

    SetDaoVault(_DaoVault: null): EventFilter;

    SetGasAttrPrice(_gasAttrPrice: null): EventFilter;

    SetGasTax(_gasTax: null): EventFilter;

    SetHoldNFTId(_holdNFTId: null): EventFilter;

    SetMaxDebt(_maxDebt: null): EventFilter;

    Submission(transactionId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    DaoSponsor(overrides?: CallOverrides): Promise<BigNumber>;

    "DaoSponsor()"(overrides?: CallOverrides): Promise<BigNumber>;

    DaoVault(overrides?: CallOverrides): Promise<BigNumber>;

    "DaoVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    GAS_ATTR_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "GAS_ATTR_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COMMITEE_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_COMMITEE_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<BigNumber>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addCommitee(commitee: string, overrides?: Overrides): Promise<BigNumber>;

    "addCommitee(address)"(
      commitee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrowGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnGas(gasAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burnGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyGas(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyGas(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "commitees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    "debt()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasAttrPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "gasAttrPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasTax(overrides?: CallOverrides): Promise<BigNumber>;

    "gasTax()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCommitees(overrides?: CallOverrides): Promise<BigNumber>;

    "getCommitees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdNFTId(overrides?: CallOverrides): Promise<BigNumber>;

    "holdNFTId()"(overrides?: CallOverrides): Promise<BigNumber>;

    isCommitee(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isCommitee(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    max(overrides?: CallOverrides): Promise<BigNumber>;

    "max()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintGas(gasAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "mintGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quit(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "quit(uint256,uint256)"(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeCommitee(commitee: string, overrides?: Overrides): Promise<BigNumber>;

    "removeCommitee(address)"(
      commitee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    replaceCommitee(
      commitee: string,
      newCommitee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "replaceCommitee(address,address)"(
      commitee: string,
      newCommitee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    "required()"(overrides?: CallOverrides): Promise<BigNumber>;

    returnGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "returnGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sellGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDaoSponsor(
      _DaoSponsor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDaoSponsor(address)"(
      _DaoSponsor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDaoVault(_DaoVault: string, overrides?: Overrides): Promise<BigNumber>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGasAttrPrice(
      _gasAttrPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGasAttrPrice(uint256)"(
      _gasAttrPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGasTax(_gasTax: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setGasTax(uint256)"(
      _gasTax: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setHoldNFTId(
      _holdNFTId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setHoldNFTId(uint256)"(
      _holdNFTId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxDebt(
      _maxDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxDebt(uint256)"(
      _maxDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sponsor(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sponsor(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitTransaction(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferNFT(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferNFT(address,address,uint256)"(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DaoSponsor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DaoSponsor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DaoVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DaoVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GAS_ATTR_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GAS_ATTR_ID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_COMMITEE_COUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_COMMITEE_COUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCommitee(
      commitee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCommitee(address)"(
      commitee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrowGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnGas(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyGas(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyGas(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeRequirement(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeRequirement(uint256)"(
      _required: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "commitees(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmTransaction(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "confirmTransaction(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "confirmations(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasAttrPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gasAttrPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gasTax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCommitees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCommitees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfirmationCount(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConfirmationCount(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfirmations(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConfirmations(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdNFTId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "holdNFTId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCommitee(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCommitee(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConfirmed(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConfirmed(uint256)"(
      transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    max(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "max()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxDebt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintGas(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintGas(uint256)"(
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quit(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "quit(uint256,uint256)"(
      tokenId: BigNumberish,
      sponsorAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeCommitee(
      commitee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeCommitee(address)"(
      commitee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    replaceCommitee(
      commitee: string,
      newCommitee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "replaceCommitee(address,address)"(
      commitee: string,
      newCommitee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "required()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "returnGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeConfirmation(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeConfirmation(uint256)"(
      transactionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sellGas(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellGas(uint256,uint256)"(
      tokenId: BigNumberish,
      gasAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDaoSponsor(
      _DaoSponsor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDaoSponsor(address)"(
      _DaoSponsor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDaoVault(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGasAttrPrice(
      _gasAttrPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGasAttrPrice(uint256)"(
      _gasAttrPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGasTax(
      _gasTax: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGasTax(uint256)"(
      _gasTax: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setHoldNFTId(
      _holdNFTId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setHoldNFTId(uint256)"(
      _holdNFTId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxDebt(
      _maxDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxDebt(uint256)"(
      _maxDebt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sponsor(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sponsor(uint256,uint256)"(
      tokenId: BigNumberish,
      ethAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitTransaction(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transactionCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferNFT(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferNFT(address,address,uint256)"(
      token: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
