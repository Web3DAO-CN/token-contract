/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BuyNFTInterface extends ethers.utils.Interface {
  functions: {
    "DaoVault()": FunctionFragment;
    "WEB3DAONFT()": FunctionFragment;
    "WETH()": FunctionFragment;
    "buy(address)": FunctionFragment;
    "maxTotalSupply()": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDaoVault(address)": FunctionFragment;
    "setMaxTotalSupply(uint256)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DaoVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WEB3DAONFT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "buy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDaoVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DaoVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEB3DAONFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDaoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetDaoVault(address)": EventFragment;
    "SetMaxTotalSupply(uint256)": EventFragment;
    "SetPrice(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDaoVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxTotalSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPrice"): EventFragment;
}

export class BuyNFT extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BuyNFTInterface;

  functions: {
    DaoVault(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DaoVault()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    WETH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WETH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    buy(to: string, overrides?: Overrides): Promise<ContractTransaction>;

    "buy(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxTotalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    price(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "price()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setDaoVault(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxTotalSupply(uint256)"(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DaoVault(overrides?: CallOverrides): Promise<string>;

  "DaoVault()"(overrides?: CallOverrides): Promise<string>;

  WEB3DAONFT(overrides?: CallOverrides): Promise<string>;

  "WEB3DAONFT()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  buy(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "buy(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  "price()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setDaoVault(
    _DaoVault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDaoVault(address)"(
    _DaoVault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    _maxTotalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxTotalSupply(uint256)"(
    _maxTotalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPrice(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPrice(uint256)"(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DaoVault(overrides?: CallOverrides): Promise<string>;

    "DaoVault()"(overrides?: CallOverrides): Promise<string>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<string>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    buy(to: string, overrides?: CallOverrides): Promise<void>;

    "buy(address)"(to: string, overrides?: CallOverrides): Promise<void>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDaoVault(_DaoVault: string, overrides?: CallOverrides): Promise<void>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxTotalSupply(uint256)"(
      _maxTotalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Buy(to: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SetDaoVault(_DaoVault: null): EventFilter;

    SetMaxTotalSupply(_maxTotalSupply: null): EventFilter;

    SetPrice(_price: null): EventFilter;
  };

  estimateGas: {
    DaoVault(overrides?: CallOverrides): Promise<BigNumber>;

    "DaoVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<BigNumber>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(to: string, overrides?: Overrides): Promise<BigNumber>;

    "buy(address)"(to: string, overrides?: Overrides): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setDaoVault(_DaoVault: string, overrides?: Overrides): Promise<BigNumber>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxTotalSupply(uint256)"(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPrice(_price: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DaoVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DaoVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEB3DAONFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WEB3DAONFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "buy(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "price()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setDaoVault(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDaoVault(address)"(
      _DaoVault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxTotalSupply(uint256)"(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
